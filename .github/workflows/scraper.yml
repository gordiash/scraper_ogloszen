name: Scraper nieruchomości - CRON

on:
  schedule:
    # Każdy poniedziałek o 0:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:  # Pozwala uruchomić ręcznie z GitHub UI

jobs:
  run-scraper:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ustaw Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Instaluj zależności
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Skopiuj plik .env z GitHub Secrets
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env

      - name: Uruchom scraper
        run: |
          python main.py --pages 5 --save_db

      # (Opcjonalnie) Dodaj eksport wyników, powiadomienie, upload do artefaktów itp.

->

name: Scraper nieruchomości - Kompletny Pipeline

on:
  schedule:
    # Codziennie o 6:00 UTC (8:00 czasu polskiego)
    - cron: '0 6 * * *'
  workflow_dispatch:  # Pozwala uruchomić ręcznie z GitHub UI
    inputs:
      pages:
        description: 'Liczba stron do scrapowania'
        required: false
        default: '5'
        type: string
      geocoding_limit:
        description: 'Maksymalna liczba adresów do geocodingu'
        required: false
        default: '100'
        type: string

jobs:
  scraper-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔧 Setup Chrome for Selenium
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: 🔧 Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: ⚙️ Configure environment
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
          
          # Sprawdź czy zmienne są ustawione
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "❌ SUPABASE_URL nie jest ustawione w secrets"
            exit 1
          fi
          
          if [ -z "${{ secrets.SUPABASE_KEY }}" ]; then
            echo "❌ SUPABASE_KEY nie jest ustawione w secrets"
            exit 1
          fi
          
          echo "✅ Zmienne środowiskowe skonfigurowane"

      - name: 🧪 Test connection to Supabase
        run: |
          python -c "
          from supabase_utils import test_supabase_connection
          if test_supabase_connection():
              print('✅ Połączenie z Supabase działa')
          else:
              print('❌ Błąd połączenia z Supabase')
              exit(1)
          "

      - name: 🚀 Run complete scraper pipeline
        run: |
          python scripts/scraper_main.py \
            --pages ${{ github.event.inputs.pages || '5' }} \
            --geocoding-limit ${{ github.event.inputs.geocoding_limit || '100' }}

      - name: 📊 Generate summary report
        if: always()
        run: |
          echo "## 📊 Podsumowanie scrapowania" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Sprawdź statystyki z bazy
          python -c "
          from supabase_utils import get_supabase_client
          from datetime import datetime, timedelta
          
          try:
              supabase = get_supabase_client()
              
              # Statystyki ogólne
              listings_result = supabase.table('listings').select('id', count='exact').execute()
              addresses_result = supabase.table('addresses').select('id', count='exact').execute()
              geocoded_result = supabase.table('addresses').select('id', count='exact').not_.is_('latitude', 'null').execute()
              
              total_listings = listings_result.count
              total_addresses = addresses_result.count
              geocoded_count = geocoded_result.count
              
              print(f'**📋 Łącznie ogłoszeń:** {total_listings}')
              print(f'**📍 Łącznie adresów:** {total_addresses}')
              print(f'**🌍 Z współrzędnymi:** {geocoded_count}')
              
              if total_addresses > 0:
                  geocoding_rate = (geocoded_count / total_addresses) * 100
                  print(f'**📈 Pokrycie geocoding:** {geocoding_rate:.1f}%')
              
              # Najnowsze ogłoszenia (z ostatnich 24h)
              yesterday = (datetime.now() - timedelta(days=1)).isoformat()
              recent_result = supabase.table('listings').select('id', count='exact').gte('scraped_at', yesterday).execute()
              recent_count = recent_result.count
              
              print(f'**🆕 Nowe ogłoszenia (24h):** {recent_count}')
              
          except Exception as e:
              print(f'❌ Błąd generowania statystyk: {e}')
          " >> $GITHUB_STEP_SUMMARY

      - name: 📋 Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scraper-logs-${{ github.run_number }}
          path: |
            scraper.log
            *.log
          retention-days: 7

      - name: 🔔 Notify on failure
        if: failure()
        run: |
          echo "❌ Scraper pipeline failed!"
          echo "Check the logs for details."
          
          # Tutaj można dodać powiadomienia (email, Slack, Discord, etc.)
          # Przykład dla webhook:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"❌ Scraper nieruchomości failed!"}' \
          #   ${{ secrets.WEBHOOK_URL }}

  # Opcjonalny job do czyszczenia starych danych
  cleanup-old-data:
    runs-on: ubuntu-latest
    needs: scraper-pipeline
    if: success() && github.event.schedule  # Tylko dla zaplanowanych uruchomień
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install supabase python-dotenv

      - name: ⚙️ Configure environment
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env

      - name: 🧹 Cleanup old data (optional)
        run: |
          python -c "
          from supabase_utils import get_supabase_client
          from datetime import datetime, timedelta
          
          try:
              supabase = get_supabase_client()
              
              # Usuń ogłoszenia starsze niż 30 dni (opcjonalne)
              # thirty_days_ago = (datetime.now() - timedelta(days=30)).isoformat()
              # result = supabase.table('listings').delete().lt('scraped_at', thirty_days_ago).execute()
              # print(f'🗑️ Usunięto {len(result.data) if result.data else 0} starych ogłoszeń')
              
              print('✅ Cleanup completed (currently disabled)')
              
          except Exception as e:
              print(f'❌ Błąd cleanup: {e}')
          "
