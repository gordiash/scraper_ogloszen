name: Scraper nieruchomości

on:
  schedule:
    - cron: '0 6 * * *'  # Codziennie o 6:00 UTC
  workflow_dispatch:
    inputs:
      pages:
        description: 'Liczba stron do scrapowania'
        required: false
        default: '5'
        type: string
      geocoding_limit:
        description: 'Maksymalna liczba adresów do geocodingu'
        required: false
        default: '100'
        type: string

jobs:
  scraper-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup Chrome for Selenium
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Setup ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Configure environment
        run: |
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env

      - name: Test connection to Supabase
        run: |
          python -c "
          from supabase_utils import test_supabase_connection
          if test_supabase_connection():
              print('Połączenie z Supabase działa')
          else:
              print('Błąd połączenia z Supabase')
              exit(1)
          "

      - name: Run scraper pipeline
        run: |
          python scripts/scraper_main.py \
            --pages ${{ github.event.inputs.pages || '5' }} \
            --geocoding-limit ${{ github.event.inputs.geocoding_limit || '100' }}

      - name: Generate summary report
        if: always()
        run: |
          echo "## Podsumowanie scrapowania" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          python -c "
          from supabase_utils import get_supabase_client
          try:
              supabase = get_supabase_client()
              listings_result = supabase.table('listings').select('id', count='exact').execute()
              addresses_result = supabase.table('addresses').select('id', count='exact').execute()
              geocoded_result = supabase.table('addresses').select('id', count='exact').not_.is_('latitude', 'null').execute()
              
              total_listings = listings_result.count
              total_addresses = addresses_result.count
              geocoded_count = geocoded_result.count
              
              print(f'**Łącznie ogłoszeń:** {total_listings}')
              print(f'**Łącznie adresów:** {total_addresses}')
              print(f'**Z współrzędnymi:** {geocoded_count}')
              
              if total_addresses > 0:
                  geocoding_rate = (geocoded_count / total_addresses) * 100
                  print(f'**Pokrycie geocoding:** {geocoding_rate:.1f}%')
          except Exception as e:
              print(f'Błąd generowania statystyk: {e}')
          " >> $GITHUB_STEP_SUMMARY

      - name: Upload logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scraper-logs-${{ github.run_number }}
          path: scraper.log
          retention-days: 7

      - name: Notify on failure
        if: failure()
        run: |
          echo "Scraper pipeline failed!"
          echo "Check the logs for details."
